name: Release
permissions:
  contents: write
  discussions: write
  
on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: mihomo-rs
            asset_name: mihomo-rs-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: mihomo-rs.exe
            asset_name: mihomo-rs-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: mihomo-rs
            asset_name: mihomo-rs-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: mihomo-rs
            asset_name: mihomo-rs-macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Run tests (native only)
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
      run: cargo test --release --target ${{ matrix.target }}
    
    - name: Prepare binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}
  
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        merge-multiple: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          mihomo-rs-linux-x64
          mihomo-rs-windows-x64.exe
          mihomo-rs-macos-x64
          mihomo-rs-macos-arm64
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up binary files before publish
      run: |
        rm -f mihomo-rs-linux-x64
        rm -f mihomo-rs-windows-x64.exe
        rm -f mihomo-rs-macos-x64
        rm -f mihomo-rs-macos-arm64
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_TOKEN }}